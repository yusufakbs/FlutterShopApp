import 'package:flutter/material.dart';
import 'package:royu/components/custom_surfix_icon.dart';
import 'package:royu/components/default_button.dart';
import 'package:royu/screens/sign_in/components/sign_form.dart';

import '../../../constants.dart';

class Body extends StatelessWidget {
  const Body({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      child: Padding(
        padding: const EdgeInsets.all(10.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              Text(
                "Register Account",
                style: TextStyle(
                    color: cPrimaryTextColor,
                    fontSize: context.dynamicHeight(0.04),
                    fontWeight: FontWeight.bold),
              ),
              Text(
                "Complate your details.",
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: context.dynamicHeight(0.02),
                ),
              ),
              SignUpForm(),
            ],
          ),
        ),
      ),
    );
  }
}

class SignUpForm extends StatefulWidget {
  @override
  _SignUpFormState createState() => _SignUpFormState();
}

class _SignUpFormState extends State<SignUpForm> {
  final myController = TextEditingController();
  final _formkey = GlobalKey<FormState>();
  late String name;
  late String username;
  late String email;
  late String password;
  late String conform_password;
  final List<String> errors = [];

  void addError({required String error}) {
    if (!errors.contains(error)) {
      setState(() {
        errors.add(error);
      });
    }
  }

  void removeError({required String error}) {
    if (!errors.contains(error)) {
      setState(() {
        errors.remove(error);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formkey,
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            buildUsernameFormField(),
            SizedBox(
              height: context.dynamicHeight(0.02),
            ),
            // buildSurnameFormField(),
            // SizedBox(
            //   height: context.dynamicHeight(0.02),
            // ),
            buildEmailFormField(),
            SizedBox(
              height: context.dynamicHeight(0.02),
            ),
            buildPasswordFormField(),
            SizedBox(
              height: context.dynamicHeight(0.02),
            ),
            buildConfPasswordFormField(),
            SizedBox(
              height: context.dynamicHeight(0.02),
            ),

            FormError(errors: errors),
            SizedBox(
              height: context.dynamicHeight(0.02),
            ),
            DefaultButton(
              text: ("Continue"),
              press: () {
                if (_formkey.currentState!.validate()) {}
                // Profile created successfully page will open and redirect to login
              },
              width: context.dynamicWidth(0.6),
              height: context.dynamicHeight(0.075),
            )
          ],
        ),
      ),
    );
  }

  TextFormField buildEmailFormField() {
    return TextFormField(
      validator: (value) {
        if (value!.isEmpty) {
          return 'Please Enter Email!';
        } else if (!emailValidatorRegExp.hasMatch(value)) {
          return "Please geÃ§rli bir mail";
        }
      },

      onSaved: (newValue) => email = newValue!,
      // onChanged: (value) {
      //   if (value.isNotEmpty) {
      //     removeError(error: kEmailNullError);
      //   } else if (!emailValidatorRegExp.hasMatch(value)) {
      //     removeError(error: kInvalidEmailError);
      //   }

      //   return null;
      // },
      // validator: (value) {
      //   if (value!.isEmpty) {
      //     addError(error: kEmailNullError);
      //   } else if (!emailValidatorRegExp.hasMatch(value)) {
      //     addError(error: kInvalidEmailError);
      //     return "";
      //   }

      //   return null;
      // },
      keyboardType: TextInputType.emailAddress,
      decoration: InputDecoration(
          labelStyle: TextStyle(
              color: cPrimaryTextColor,
              fontSize: context.dynamicHeight(0.02),
              fontWeight: FontWeight.bold),
          labelText: "Email",
          hintText: "Enter your email",
          suffixIcon: CustomSurffixIcon(
            icon: Icons.mail,
          )),
    );
  }

  TextFormField buildConfPasswordFormField() {
    return TextFormField(
      // validator: (value) {
      //   if (value!.isEmpty) {
      //     return 'Please enter Confirm Password!';
      //   }
      // },
      // onSaved: (newValue) => conform_password = newValue!,
      // onChanged: (value) {
      //   if (password == conform_password) {
      //     removeError(error: kMatchPassError);
      //   }

      //   return null;
      // },
      validator: (value) {
        if (value!.isEmpty) {
          return "Please enter confirm password";
        } else if (password != value) {
          return "";
        }

        return null;
      },
      obscureText: true,
      keyboardType: TextInputType.visiblePassword,
      decoration: InputDecoration(
          labelStyle: TextStyle(
              color: cPrimaryTextColor,
              fontSize: context.dynamicHeight(0.02),
              fontWeight: FontWeight.bold),
          labelText: "Confirm Password",
          hintText: "Re-enter your password",
          suffixIcon: CustomSurffixIcon(
            icon: Icons.lock,
          )),
    );
  }

  TextFormField buildPasswordFormField() {
    return TextFormField(
      validator: (value) {
        if (value!.isEmpty) {
          return 'Please Enter Password!';
        } else if (value.length < 8) {
          return "Password is short";
        }
      },

      // onSaved: (newValue) => password = newValue!,
      // onChanged: (value) {
      //   if (value.isNotEmpty) {
      //     removeError(error: kPassNullError);
      //   } else if (value.length >= 8) {
      //     removeError(error: kShortPassError);
      //   }
      //   password = value;
      //   return null;
      // },
      // validator: (value) {
      //   if (value!.isEmpty) {
      //     return "";
      //   } else if (value.length < 8) {
      //     addError(error: kShortPassError);

      //     return "";
      //   }
      //   password = value;

      //   return null;
      // },

      obscureText: true,
      keyboardType: TextInputType.visiblePassword,
      decoration: InputDecoration(
          labelStyle: TextStyle(
              color: cPrimaryTextColor,
              fontSize: context.dynamicHeight(0.02),
              fontWeight: FontWeight.bold),
          labelText: "Password",
          hintText: "Enter your password",
          suffixIcon: CustomSurffixIcon(
            icon: Icons.lock,
          )),
    );
  }

  //
  TextFormField buildUsernameFormField() {
    return TextFormField(
      validator: (value) {
        if (value!.isEmpty) {
          return 'Please Enter Username!';
        }
      },

      // onSaved: (newValue) => username = newValue!,
      // onChanged: (value) {
      //   if (value.isNotEmpty) {
      //     removeError(error: kUsernameNullError);
      //   } else if (userNameValidatorRegExp.hasMatch(value)) {
      //     removeError(error: kInvalidUsernameError);
      //   }

      //   return null;
      // },
      // validator: (value) {
      //   if (value!.isEmpty) {
      //     addError(error: kUsernameNullError);
      //     return "";
      //   } else if (!userNameValidatorRegExp.hasMatch(value)) {
      //     removeError(error: kInvalidUsernameError);
      //     return "";
      //   }

      //   return null;
      // },
      keyboardType: TextInputType.name,
      decoration: InputDecoration(
          labelStyle: TextStyle(
              color: cPrimaryTextColor,
              fontSize: context.dynamicHeight(0.02),
              fontWeight: FontWeight.bold),
          labelText: "Username",
          hintText: "Enter your username",
          suffixIcon: CustomSurffixIcon(icon: Icons.account_box)),
    );
  }
}
